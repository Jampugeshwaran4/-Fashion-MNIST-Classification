from tensorflow.keras.datasets import fashion_mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

# Load data
(x_train, y_train), (x_test, y_test) = fashion_mnist.load_data()

# Preprocess data (normalize pixel values and reshape)
x_train = x_train.astype('float32') / 255
x_test = x_test.astype('float32') / 255
x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)  # Add channel dimension
x_test = x_test.reshape(x_test.shape[0], 28, 28, 1)

# Convert class labels to one-hot encoding
y_train = keras.utils.to_categorical(y_train, 10)  # 10 classes (clothing types)
y_test = keras.utils.to_categorical(y_test, 10)

# Define CNN model
model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Flatten())
model.add(Dense(64, activation='relu'))
model.add(Dense(10, activation='softmax'))

# Compile and train the model
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(x_train, y_train, epochs=15, validation_data=(x_test, y_test))

# Evaluate the model on test data
loss, accuracy = model.evaluate(x_test, y_test)
print('Test accuracy:', accuracy)

# Predict on a new image (optional)
# ... load and preprocess a new image
predicted_class = np.argmax(model.predict(new_image))
print('Predicted class:', predicted_class)  # Map back to class label
